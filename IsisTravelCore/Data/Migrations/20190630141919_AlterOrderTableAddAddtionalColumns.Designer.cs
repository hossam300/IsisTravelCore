// <auto-generated />
using System;
using IsisTravelCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IsisTravelCore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190630141919_AlterOrderTableAddAddtionalColumns")]
    partial class AlterOrderTableAddAddtionalColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<int>("Day");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("AdultPrice");

                    b.Property<decimal>("BabyPrice");

                    b.Property<decimal>("ChildPrice");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.CatrgoryDayPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("AdultPrice");

                    b.Property<decimal>("BabyPrice");

                    b.Property<decimal>("ChildPrice");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal>("SingleRoomExtrafees");

                    b.Property<int>("TourCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TourCategoryId");

                    b.ToTable("CatrgoryDayPrices");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CountryMainImage");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.CountryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Image");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<bool>("SlideShow");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("CountryImages");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExtelnalLink");

                    b.Property<string>("FacebookLink");

                    b.Property<string>("HotelMainImage");

                    b.Property<decimal?>("Lang");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal?>("Lat");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("TwitterLink");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.HotelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<int>("HotelId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsHome");

                    b.Property<DateTime>("LastModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImage");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Include", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal?>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Includes");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("CP");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<decimal?>("Discount1");

                    b.Property<decimal?>("Discount2");

                    b.Property<decimal?>("Discount3");

                    b.Property<decimal?>("Discount4");

                    b.Property<string>("ItemName1");

                    b.Property<string>("ItemName2");

                    b.Property<string>("ItemName3");

                    b.Property<string>("ItemName4");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("NIE");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("Phone");

                    b.Property<decimal?>("Price1");

                    b.Property<decimal?>("Price2");

                    b.Property<decimal?>("Price3");

                    b.Property<decimal?>("Price4");

                    b.Property<int?>("Quantity1");

                    b.Property<int?>("Quantity2");

                    b.Property<int?>("Quantity3");

                    b.Property<int?>("Quantity4");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.RequestOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AdultQuantity");

                    b.Property<int>("BabyQuantity");

                    b.Property<int>("CategoryId");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ExtraRoomQuantity");

                    b.Property<bool>("Finished");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("RoomType");

                    b.Property<decimal>("RoomTypeVal");

                    b.Property<int>("State");

                    b.Property<decimal>("Total");

                    b.Property<decimal>("TotalAdult");

                    b.Property<decimal>("TotalBaby");

                    b.Property<decimal>("TotalExtraRoom");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TourId");

                    b.ToTable("RequestOffers");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal?>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.SildeShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("SildeShows");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<DateTime>("LastModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Duration");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<bool>("HomePage");

                    b.Property<string>("Intro")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal>("OldPrice");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("TourMainImage");

                    b.Property<string>("TourName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ActivityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TourId");

                    b.ToTable("TourActivities");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TourId");

                    b.ToTable("TourCategories");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsHome");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourInclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<int>("IncludeId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IncludeId");

                    b.HasIndex("TourId");

                    b.ToTable("TourIncludes");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ServiceId");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TourId");

                    b.ToTable("TourServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Activity", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.ApplicationUserRole", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Category", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.CatrgoryDayPrice", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.TourCategory", "TourCategory")
                        .WithMany("CategoryDayPrices")
                        .HasForeignKey("TourCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Country", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.CountryImage", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Country", "Country")
                        .WithMany("CountryImages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Hotel", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Category", "Category")
                        .WithMany("Hotels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.Country", "Country")
                        .WithMany("Hotels")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.HotelImage", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Include", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Order", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.RequestOffer", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Service", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.SildeShow", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.Tour", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Country", "Country")
                        .WithMany("Tours")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourActivity", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany("Activities")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourCategory", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany("TourCategories")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourImage", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourInclude", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Include", "Include")
                        .WithMany()
                        .HasForeignKey("IncludeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany("TourInclude")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsisTravelCore.Models.Domains.TourService", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IsisTravelCore.Models.Domains.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsisTravelCore.Models.Domains.Tour", "Tour")
                        .WithMany("AdditionalServices")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IsisTravelCore.Models.Domains.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
